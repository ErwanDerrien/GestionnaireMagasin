@startuml ProjectClasses

class app {
  +config: dict
  +extensions: dict
  +create_app()
  +_configure_app()
  +_initialize_extensions()
  +_register_blueprints()
}

class AuthController {
  +login_route()
}

class ProductController {
  +get_all_products_route()
  +get_all_products_of_store_route()
  +search_product_route()
  +restock_store_route()
}

class order_controller {
  +get_all_orders_status()
  +create_order_route()
  +get_store_orders()
  +return_order_route()
  +get_orders_report()
}

class admin_controller {
  +home()
  +reset_database_route()
}

class product_services {
  +search_product_service()
  +stock_status()
  +restock_store_products()
}

class order_services {
  +save_order()
  +return_order()
  +orders_status()
  +generate_orders_report()
}

class auth {
  +generate_jwt()
  +decode_jwt()
}

' Relations principales
app --> AuthController : registers
app --> ProductController : registers
app --> order_controller : registers
app --> admin_controller : registers

AuthController --> auth : uses
ProductController --> product_services : uses
order_controller --> order_services : uses

' Relations services
product_services "1" -- "0..*" Product
order_services "1" -- "0..*" Order
order_services --> product_services : checks stock

' Modèles de données
class Product {
  +id: int
  +name: str
  +price: float
  +stock: int
}

class Order {
  +id: int
  +items: list[dict]
  +status: str
}

' Extensions
class FlaskExtensions {
  +Swagger
  +RedisCache
  +PrometheusMetrics
}

app --> FlaskExtensions : initializes

@enduml