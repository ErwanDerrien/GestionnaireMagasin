services:
  redis:
    image: redis:7-alpine
    container_name: redis-store
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [monitoring_net]
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  auth_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=auth
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=auth
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8081:8080"
    networks: [monitoring_net]
    container_name: auth_instance_1
    depends_on: [redis]
    restart: unless-stopped

  auth_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=auth
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=auth
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8082:8080"
    networks: [monitoring_net]
    container_name: auth_instance_2
    depends_on: [redis]
    restart: unless-stopped

  product_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=product
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8091:8080"
    networks: [monitoring_net]
    container_name: product_instance_1
    depends_on: [redis]
    restart: unless-stopped

  product_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=product
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8092:8080"
    networks: [monitoring_net]
    container_name: product_instance_2
    depends_on: [redis]
    restart: unless-stopped

  product_instance_3:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=3
      - SERVICE_TYPE=product
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8093:8080"
    networks: [monitoring_net]
    container_name: product_instance_3
    depends_on: [redis]
    restart: unless-stopped

  order_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=order
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8101:8080"
    networks: [monitoring_net]
    container_name: order_instance_1
    depends_on: [redis]
    restart: unless-stopped

  order_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=order
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8102:8080"
    networks: [monitoring_net]
    container_name: order_instance_2
    depends_on: [redis]
    restart: unless-stopped

  order_instance_3:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=3
      - SERVICE_TYPE=order
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8103:8080"
    networks: [monitoring_net]
    container_name: order_instance_3
    depends_on: [redis]
    restart: unless-stopped

  order_instance_4:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=4
      - SERVICE_TYPE=order
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8104:8080"
    networks: [monitoring_net]
    container_name: order_instance_4
    depends_on: [redis]
    restart: unless-stopped

  order_instance_5:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=5
      - SERVICE_TYPE=order
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8105:8080"
    networks: [monitoring_net]
    container_name: order_instance_5
    depends_on: [redis]
    restart: unless-stopped

  other_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=other
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=other
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8111:8080"
    networks: [monitoring_net]
    container_name: other_instance_1
    depends_on: [redis]
    restart: unless-stopped

  other_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=other
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=other
      - PROMETHEUS_METRICS_PORT=8080
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8112:8080"
    networks: [monitoring_net]
    container_name: other_instance_2
    depends_on: [redis]
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports: ["80:80"]
    volumes: [./nginx.conf:/etc/nginx/conf.d/default.conf:ro]
    depends_on:
      - redis
      - auth_instance_1
      - auth_instance_2
      - product_instance_1
      - product_instance_2
      - product_instance_3
      - order_instance_1
      - order_instance_2
      - order_instance_3
      - order_instance_4
      - order_instance_5
      - other_instance_1
      - other_instance_2
    networks: [monitoring_net]
    container_name: nginx
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports: ["9091:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--log.level=info'
      - '--web.enable-lifecycle'
    networks: [monitoring_net]
    container_name: prometheus
    restart: unless-stopped
    depends_on:
      - auth_instance_1
      - auth_instance_2
      - product_instance_1
      - product_instance_2
      - product_instance_3
      - order_instance_1
      - order_instance_2
      - order_instance_3
      - order_instance_4
      - order_instance_5
      - other_instance_1
      - other_instance_2

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports: ["9121:9121"]
    environment:
      - REDIS_ADDR=redis://redis-store:6379
    networks: [monitoring_net]
    depends_on: [redis]
    restart: unless-stopped

networks:
  monitoring_net:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
