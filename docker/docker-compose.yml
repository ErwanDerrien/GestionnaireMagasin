services:
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [monitoring_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-store
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [monitoring_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks: [monitoring_net]
    restart: "no"

  kong:
    image: kong:latest
    container_name: kong-gateway
    depends_on:
      - kong-migrations
      - postgres
      - redis
    ports:
      - "80:8000"
      - "8001:8001"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    networks: [monitoring_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports: ["9091:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks: [monitoring_net]
    restart: unless-stopped
    depends_on: [redis]

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports: ["9121:9121"]
    environment:
      - REDIS_ADDR=redis://redis-store:6379
    networks: [monitoring_net]
    depends_on: 
      redis:
        condition: service_healthy
    restart: unless-stopped

  auth_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=auth
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=auth
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8081:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=auth
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=auth
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8082:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=product
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8091:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=product
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8092:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product_instance_3:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=product
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=3
      - SERVICE_TYPE=product
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8093:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=order
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8101:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=order
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8102:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_instance_3:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=3
      - SERVICE_TYPE=order
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8103:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_instance_4:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=4
      - SERVICE_TYPE=order
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8104:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_instance_5:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=order
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=5
      - SERVICE_TYPE=order
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8105:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  other_instance_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=other
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - SERVICE_TYPE=other
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8111:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  other_instance_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.app --service=other
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - SERVICE_TYPE=other
      - REDIS_HOST=redis-store
      - REDIS_PORT=6379
    ports:
      - "8112:8080"
    networks: [monitoring_net]
    depends_on: 
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  monitoring_net:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  postgres_data:
