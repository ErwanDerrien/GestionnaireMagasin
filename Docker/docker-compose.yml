services:
  # Application Instances avec ports exposés pour debug
  store_manager_1:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.controller.app
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=1
      - PROMETHEUS_METRICS_PORT=8080
    ports:
      - '8081:8080'  # Exposé pour debug
    networks:
      - monitoring_net
    container_name: store_manager_1  # Nom fixe

  store_manager_2:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.controller.app
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=2
      - PROMETHEUS_METRICS_PORT=8080
    ports:
      - '8082:8080'  # Exposé pour debug
    networks:
      - monitoring_net
    container_name: store_manager_2  # Nom fixe

  store_manager_3:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    command: python -m src.controller.app
    volumes:
      - ../:/app
    environment:
      - INSTANCE_NUM=3
      - PROMETHEUS_METRICS_PORT=8080
    ports:
      - '8083:8080'  # Exposé pour debug
    networks:
      - monitoring_net
    container_name: store_manager_3  # Nom fixe

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
    command: |
      /bin/sh -c "
      cat > /etc/nginx/conf.d/default.conf << 'EOF'
      upstream store_manager {
          least_conn;
          server store_manager_1:8080 max_fails=3 fail_timeout=30s;
          server store_manager_2:8080 max_fails=3 fail_timeout=30s;
          server store_manager_3:8080 max_fails=3 fail_timeout=30s;
      }
      server {
          listen 80;
          location / {
              proxy_pass http://store_manager;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              proxy_connect_timeout 30s;
              proxy_send_timeout 30s;
              proxy_read_timeout 30s;
              proxy_buffering off;
          }
          location /health {
              proxy_pass http://store_manager;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
          }
          location /metrics {
              proxy_pass http://store_manager_1:8080/metrics;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
          }
      }
      EOF
      nginx -g 'daemon off;'
      "
    depends_on:
      - store_manager_1
      - store_manager_2
      - store_manager_3
    networks:
      - monitoring_net
    container_name: nginx

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9091:9090'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--log.level=debug'
    networks:
      - monitoring_net
    container_name: prometheus
    depends_on:
      - store_manager_1
      - store_manager_2
      - store_manager_3

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring_net
    container_name: grafana

networks:
  monitoring_net:
    driver: bridge

volumes:
  grafana_data: