#!/bin/bash

# Script d'automatisation des tests de charge K6 avec g√©n√©ration de rapport
# Usage: ./automate_load_tests.sh --repo "nom_repo" --filename "nom_fichier" [--vus nombre_users]

set -e  # Arr√™ter le script en cas d'erreur

# Valeurs par d√©faut
VUS=10
REPO=""
FILENAME=""
SKIP_TESTS=false

# Parser les arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --repo)
            REPO="$2"
            shift 2
            ;;
        --filename)
            FILENAME="$2"
            shift 2
            ;;
        --vus)
            VUS="$2"
            shift 2
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 --repo REPO_NAME --filename FILENAME [--vus VUS_COUNT] [--skip-tests]"
            echo ""
            echo "Options:"
            echo "  --repo         Nom du repository pour le rapport (obligatoire)"
            echo "  --filename     Nom du fichier pour le rapport (obligatoire)"
            echo "  --vus          Nombre d'utilisateurs virtuels (d√©faut: 10)"
            echo "  --skip-tests   Skip les tests et g√©n√®re un rapport des 30 derni√®res minutes"
            echo "  -h, --help     Afficher cette aide"
            echo ""
            echo "Exemples:"
            echo "  $0 --repo \"after_round_robin\" --filename \"round_robin\" --vus 15"
            echo "  $0 --repo \"current_data\" --filename \"last_30min\" --skip-tests"
            exit 0
            ;;
        *)
            echo "Argument inconnu: $1"
            echo "Utilisez -h ou --help pour voir l'aide"
            exit 1
            ;;
    esac
done

# V√©rifier que les param√®tres obligatoires sont fournis
if [[ -z "$REPO" || -z "$FILENAME" ]]; then
    echo "Erreur: Les param√®tres --repo et --filename sont obligatoires"
    echo "Utilisez -h ou --help pour voir l'aide"
    exit 1
fi

# Fonction pour afficher un message avec timestamp
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fonction pour attendre avec compte √† rebours
countdown() {
    local seconds=$1
    local message=$2
    
    log_message "$message"
    for ((i=seconds; i>0; i--)); do
        printf "\r‚è≥ Pause en cours... %d secondes restantes" $i
        sleep 1
    done
    printf "\r‚úÖ Pause termin√©e!                              \n"
}

# Stocker l'heure de d√©but
if [ "$SKIP_TESTS" = true ]; then
    # Calculer les 30 derni√®res minutes en heure locale
    END_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
    
    # D√©tecter l'OS pour utiliser la bonne syntaxe de date
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - heure locale
        START_TIME=$(date -v-30M +"%Y-%m-%dT%H:%M:%S")
    else
        # Linux - heure locale
        START_TIME=$(date -d '30 minutes ago' +"%Y-%m-%dT%H:%M:%S")
    fi
    
    log_message "‚è≠Ô∏è  Mode skip-tests activ√©"
    log_message "üìä G√©n√©ration du rapport pour les 30 derni√®res minutes"
    log_message "‚è∞ P√©riode analys√©e: $START_TIME √† $END_TIME (heure locale)"
else
    START_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
    
    log_message "üöÄ D√©but des tests de charge automatis√©s"
    log_message "üìä Configuration: $VUS utilisateurs virtuels"
    log_message "‚è∞ Heure de d√©but: $START_TIME (heure locale)"
fi

log_message "üìÅ Rapport: $REPO/$FILENAME"
echo ""

if [ "$SKIP_TESTS" = false ]; then
    # TODO config de gestion de param
    # # Test 1: 5 minutes
    # log_message "üî• Lancement du test 1/3 (5 minutes)"
    # k6 run --vus $VUS --duration 5m monitoring/load_test.js
    # log_message "‚úÖ Test 1/3 termin√©"
    # echo ""

    # # Pause 1 minute
    # countdown 60 "‚è∏Ô∏è  Pause de 1 minute avant le test 2/3"
    # echo ""

    # Test 2: 3 minutes
    log_message "üî• Lancement du test 2/3 (3 minutes)"
    k6 run --vus $VUS --duration 3m monitoring/load_test.js
    log_message "‚úÖ Test 2/3 termin√©"
    echo ""

    # Pause 1 minute
    countdown 60 "‚è∏Ô∏è  Pause de 1 minute avant le test 3/3"
    echo ""

    # Test 3: 1 minute
    log_message "üî• Lancement du test 3/3 (1 minute)"
    k6 run --vus $VUS --duration 1m monitoring/load_test.js
    log_message "‚úÖ Test 3/3 termin√©"
    echo ""

    # Stocker l'heure de fin pour les tests
    END_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
fi

log_message "üìà G√©n√©ration du rapport Prometheus..."
if [ "$SKIP_TESTS" = false ]; then
    log_message "‚è∞ P√©riode analys√©e: $START_TIME √† $END_TIME (heure locale)"
fi

# D√©tecter la commande Python disponible
PYTHON_CMD=""
if command -v python3 &> /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &> /dev/null; then
    PYTHON_CMD="python"
else
    log_message "‚ùå Erreur: Ni 'python' ni 'python3' n'ont √©t√© trouv√©s"
    log_message "üìã Veuillez installer Python ou v√©rifier votre PATH"
    exit 1
fi

# Cr√©er un environnement virtuel temporaire
TEMP_VENV="temp_report_env"
log_message "üêç Cr√©ation de l'environnement Python temporaire..."

$PYTHON_CMD -m venv $TEMP_VENV

# Activer l'environnement virtuel
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    # Windows
    source $TEMP_VENV/Scripts/activate
else
    # Linux/macOS
    source $TEMP_VENV/bin/activate
fi

# Installer les d√©pendances
log_message "üì¶ Installation des d√©pendances Python..."
pip install --quiet matplotlib python-dateutil requests

# G√©n√©rer le rapport
log_message "üìä Ex√©cution du script de g√©n√©ration de rapport..."
python ./monitoring/generate_prometheus_graphs.py \
    --repo "$REPO" \
    --filename "$FILENAME" \
    --start "$START_TIME" \
    --end "$END_TIME"

# D√©sactiver l'environnement virtuel
deactivate

# Supprimer l'environnement virtuel temporaire
log_message "üóëÔ∏è  Suppression de l'environnement temporaire..."
rm -rf $TEMP_VENV

# V√©rifier si le PDF a √©t√© g√©n√©r√©
PDF_PATH="documentation/monitoring/$REPO/$FILENAME.pdf"
if [[ -f "$PDF_PATH" ]]; then
    log_message "‚úÖ PDF g√©n√©r√© avec succ√®s: $PDF_PATH"
else
    log_message "‚ö†Ô∏è  Attention: Le PDF n'a pas √©t√© trouv√© √† l'emplacement attendu: $PDF_PATH"
fi

log_message "üéâ Automatisation termin√©e avec succ√®s!"
echo ""
if [ "$SKIP_TESTS" = true ]; then
    echo "üìã R√©sum√©:"
    echo "   ‚Ä¢ Mode: Rapport des 30 derni√®res minutes (tests skipp√©s)"
    echo "   ‚Ä¢ P√©riode analys√©e: $START_TIME ‚Üí $END_TIME (heure locale)"
    echo "   ‚Ä¢ Rapport: $PDF_PATH"
else
    echo "üìã R√©sum√©:"
    echo "   ‚Ä¢ Tests effectu√©s: 3 (5min + 3min + 1min)"
    echo "   ‚Ä¢ Utilisateurs virtuels: $VUS"
    echo "   ‚Ä¢ Dur√©e totale: ~11 minutes (tests + pauses)"
    echo "   ‚Ä¢ Rapport: $PDF_PATH"
    echo "   ‚Ä¢ P√©riode: $START_TIME ‚Üí $END_TIME (heure locale)"
fi