#!/bin/bash

# Script d'automatisation des tests de charge K6 avec g√©n√©ration de rapport
# Usage: ./automate_load_tests.sh --repo "nom_repo" --filename "nom_fichier" [--vus nombre_users] [--duration minutes]

# Valeurs par d√©faut
VUS=10
REPO=""
FILENAME=""
SKIP_TESTS=false
DURATION=1 # Dur√©e en minutes par d√©faut

# Parser les arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --repo)
        REPO="$2"
        shift 2
        ;;
    --filename)
        FILENAME="$2"
        shift 2
        ;;
    --vus)
        VUS="$2"
        shift 2
        ;;
    --skip-tests)
        SKIP_TESTS=true
        shift
        ;;
    --duration)
        DURATION="$2"
        shift 2
        ;;
    -h | --help)
        echo "Usage: $0 --repo REPO_NAME --filename FILENAME [--vus VUS_COUNT] [--duration MINUTES] [--skip-tests]"
        exit 0
        ;;
    *)
        echo "Argument inconnu: $1"
        exit 1
        ;;
    esac
done

if [[ -z "$REPO" || -z "$FILENAME" ]]; then
    echo "Erreur: --repo et --filename sont requis"
    exit 1
fi

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

countdown() {
    local seconds=$1
    local message=$2
    log_message "$message"
    for ((i = seconds; i > 0; i--)); do
        printf "\r‚è≥ Pause en cours... %d secondes restantes" $i
        sleep 1
    done
    printf "\r‚úÖ Pause termin√©e!                              \n"
}

# D√©finir les timestamps
if [ "$SKIP_TESTS" = true ]; then
    END_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
    if [[ "$OSTYPE" == "darwin"* ]]; then
        START_TIME=$(date -v-${DURATION}M +"%Y-%m-%dT%H:%M:%S")
    else
        START_TIME=$(date -d "${DURATION} minutes ago" +"%Y-%m-%dT%H:%M:%S")
    fi
    log_message "‚è≠Ô∏è  Mode skip-tests activ√©"
    log_message "üìä G√©n√©ration du rapport pour les $DURATION derni√®res minutes"
    log_message "‚è∞ P√©riode analys√©e: $START_TIME √† $END_TIME (heure locale)"
else
    START_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
    log_message "üöÄ D√©but des tests de charge automatis√©s"
    log_message "üìä Configuration: $VUS utilisateurs virtuels pendant ${DURATION}min"
    log_message "‚è∞ Heure de d√©but: $START_TIME"
fi

log_message "üìÅ Rapport: $REPO/$FILENAME"
echo ""

if [ "$SKIP_TESTS" = false ]; then
    countdown 30 "‚è∏Ô∏è  Pause de 30 sec avant"
    echo ""
    log_message "üî• Lancement du test (${DURATION} minute(s))"
    if ! k6 run --vus "$VUS" --duration "${DURATION}m" monitoring/load_test.js; then
        log_message "‚ö†Ô∏è  Erreur durant le test K6, mais le script continue"
    fi
    log_message "‚úÖ Test termin√©"
    countdown 30 "‚è∏Ô∏è  Pause de 30 sec apr√®s"
    echo ""
    END_TIME=$(date +"%Y-%m-%dT%H:%M:%S")
fi

log_message "üìà G√©n√©ration du rapport Prometheus..."
log_message "‚è∞ P√©riode: $START_TIME √† $END_TIME"

PYTHON_CMD=""
if command -v python3 &>/dev/null; then
    PYTHON_CMD="python3"
elif command -v python &>/dev/null; then
    PYTHON_CMD="python"
else
    log_message "‚ùå Python non trouv√©"
    exit 1
fi

TEMP_VENV="temp_report_env"
log_message "üêç Cr√©ation venv temporaire..."
$PYTHON_CMD -m venv $TEMP_VENV

if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    source $TEMP_VENV/Scripts/activate
else
    source $TEMP_VENV/bin/activate
fi

log_message "üì¶ Installation des d√©pendances Python..."
pip install --quiet matplotlib python-dateutil requests

log_message "üìä Ex√©cution du script de g√©n√©ration de rapport..."
$PYTHON_CMD ./monitoring/generate_prometheus_graphs.py \
    --repo "$REPO" \
    --filename "$FILENAME" \
    --start "$START_TIME" \
    --end "$END_TIME" \
    --width 14 \
    --height 16

deactivate
rm -rf $TEMP_VENV

PDF_PATH="documentation/monitoring/$REPO/$FILENAME.pdf"
if [[ -f "$PDF_PATH" ]]; then
    log_message "‚úÖ PDF g√©n√©r√© avec succ√®s: $PDF_PATH"
else
    log_message "‚ö†Ô∏è  PDF non trouv√© √† l'emplacement attendu: $PDF_PATH"
fi

log_message "üéâ Script termin√© avec succ√®s"
echo ""
echo "üìã R√©sum√©:"
if [ "$SKIP_TESTS" = true ]; then
    echo "   ‚Ä¢ Mode: Rapport des $DURATION derni√®res minutes (tests non ex√©cut√©s)"
else
    echo "   ‚Ä¢ Tests effectu√©s: 1 (${DURATION}min)"
    echo "   ‚Ä¢ Utilisateurs virtuels: $VUS"
    echo "   ‚Ä¢ Dur√©e totale: ~${DURATION} minute(s)"
fi
echo "   ‚Ä¢ Rapport: $PDF_PATH"
echo "   ‚Ä¢ P√©riode: $START_TIME ‚Üí $END_TIME"
